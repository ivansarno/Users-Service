# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Report(Model):
    """NOTE: This class is auto generated by the swagger code generator program

    Do not edit the class manually.
    """

    def __init__(self, id: int = None, author_email: str = None,
                 reported_email: str = None, description: str = None,
                 timestamp: str = None):  # noqa: E501
        """Report - a model defined in Swagger

        :param id: The id of this Report.  # noqa: E501
        :type id: int
        :param author_email: The author_email of this Report.  # noqa: E501
        :type author_email: str
        :param reported_email: The reported_email of this Report.  # noqa: E501
        :type reported_email: str
        :param description: The description of this Report.  # noqa: E501
        :type description: str
        :param timestamp: The timestamp of this Report.  # noqa: E501
        :type timestamp: str
        """
        self.swagger_types = {
            'id': int,
            'author_email': str,
            'reported_email': str,
            'description': str,
            'timestamp': str
        }

        self.attribute_map = {
            'id': 'id',
            'author_email': 'author_email',
            'reported_email': 'reported_email',
            'description': 'description',
            'timestamp': 'timestamp'
        }

        self._id = id
        self._author_email = author_email
        self._reported_email = reported_email
        self._description = description
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Report of this Report.  # noqa: E501
        :rtype: Report
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Report.


        :return: The id of this Report.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Report.


        :param id: The id of this Report.
        :type id: int
        """

        self._id = id

    @property
    def author_email(self) -> str:
        """Gets the author_email of this Report.


        :return: The author_email of this Report.
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email: str):
        """Sets the author_email of this Report.


        :param author_email: The author_email of this Report.
        :type author_email: str
        """
        if author_email is None:
            raise ValueError(
                "Invalid value for `author_email`, must not be `None`")  # noqa: E501

        self._author_email = author_email

    @property
    def reported_email(self) -> str:
        """Gets the reported_email of this Report.


        :return: The reported_email of this Report.
        :rtype: str
        """
        return self._reported_email

    @reported_email.setter
    def reported_email(self, reported_email: str):
        """Sets the reported_email of this Report.


        :param reported_email: The reported_email of this Report.
        :type reported_email: str
        """
        if reported_email is None:
            raise ValueError(
                "Invalid value for `reported_email`, must not be `None`")  # noqa: E501

        self._reported_email = reported_email

    @property
    def description(self) -> str:
        """Gets the description of this Report.


        :return: The description of this Report.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Report.


        :param description: The description of this Report.
        :type description: str
        """
        if description is None:
            raise ValueError(
                "Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Report.


        :return: The timestamp of this Report.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this Report.


        :param timestamp: The timestamp of this Report.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError(
                "Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp
